// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/calendar.html
// html/index.html
// assets/date.js
// assets/styles.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlCalendarHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xb1\x72\xdc\x20\x10\xad\xd1\x57\x90\x4d\x93\x14\x0a\x73\x29\x2f\x70\x4d\x92\x3a\x99\xb1\x1b\x97\x7b\xb0\x3a\xe1\x43\xa0\x81\xd5\x8d\x35\x1e\xff\xbb\x47\xa0\x9b\x71\xe1\x06\xf6\xf1\xf6\x2d\xef\x81\xfe\xf2\xe7\xdf\xef\xc7\xa7\xff\x7f\xe5\xc8\x53\x38\x75\xba\x6d\x42\x8f\x84\xee\xd4\x09\xa1\x83\x8f\x57\x99\x29\x18\x28\xbc\x06\x2a\x23\x11\x83\x1c\x33\x0d\x06\x14\x96\x42\x5c\x54\x63\x7e\xd8\x52\xa0\x6a\x2a\xde\x2a\x31\xa4\x3c\xc9\xd7\xad\x12\xce\x97\x39\xe0\x7a\x94\x43\xa0\x97\x5f\xf5\x08\x83\xbf\xc4\xde\xa6\xc8\x14\xf9\x28\x2d\x45\xa6\xdc\xa8\xe7\xa5\xb0\x1f\xd6\x4f\xc9\xb7\x6e\x5b\xbf\x96\xe5\x3c\x79\xde\xa7\x9f\xd1\x5e\x2f\x39\x2d\xd1\xf5\x36\x85\x94\x8f\xf2\x86\xf9\x5b\xdf\xc7\x94\xdd\xe1\xf0\x7d\xd7\x09\xa1\xd5\xdd\x9c\x56\x2d\x63\x27\xf4\x39\xb9\xb5\x1a\xaf\x76\x6d\xc0\x52\x0c\x78\xa6\xa9\x3f\xfc\x04\x89\x96\x7d\x8a\x06\x94\xc5\x40\xd1\x61\x56\x17\x8a\x94\x91\x09\xe4\x44\x3c\x26\x67\x60\x4e\x85\x41\x52\xb4\xbc\xce\x64\x60\x5a\x02\xfb\x19\x33\xab\x6d\x62\xef\x90\xb1\xbe\x8c\xd0\x3e\xce\x0b\xcb\xd6\x35\xf8\x40\x20\x23\x4e\x7b\x5d\x40\xaa\x8f\x5d\xde\x19\x68\x21\x61\x57\xdc\xd1\x0d\xc3\x42\x06\x1e\x76\x58\x55\xba\xde\x55\x83\xb5\x3c\x5a\xb5\xcf\x7c\x0f\x00\x00\xff\xff\xe9\x2e\x5f\x22\xe4\x01\x00\x00")

func htmlCalendarHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlCalendarHtml,
		"html/calendar.html",
	)
}

func htmlCalendarHtml() (*asset, error) {
	bytes, err := htmlCalendarHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/calendar.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x3d\x4f\xe4\x30\x10\xad\x9d\x5f\xe1\x9b\xd3\x95\xbb\xde\x9c\x74\xcd\x9e\x9d\xe6\xf6\x44\x09\x05\x0d\xa5\xb1\x27\xd8\xc4\x89\x83\xc7\x01\x16\xc4\x7f\x47\x4e\x76\xc5\x8a\x62\x25\x28\x9c\xcc\x68\xde\x7b\xf3\x29\x7f\xec\x2e\xff\x5d\xdf\x5c\xfd\xe7\x2e\xf7\xa1\xa9\xe4\xf2\x63\xd2\xa1\xb6\x4d\xc5\x98\x0c\x7e\xe8\x78\xc2\xa0\x80\xf2\x3e\x20\x39\xc4\x0c\xdc\x25\x6c\x15\x08\x4d\x84\x99\xc4\x12\x59\x1b\x22\x98\x39\xb3\x5f\x2c\xe6\x87\x71\xca\xfc\xb5\x98\xec\xc9\xdb\xec\xb6\xfc\xcf\xe6\xd7\xdf\xe2\xbf\x55\xe5\xfb\xd3\x84\x68\xba\x03\xa2\x8d\x43\x5e\x91\x7f\xc1\x2d\xaf\x37\x09\xfb\x03\x8e\x31\x29\x8e\x92\x52\x2c\x95\x55\x4c\xde\x46\xbb\x9f\xd3\xb9\x9a\x7b\xab\x60\x56\x02\x6e\x82\x26\x52\xe0\x33\xf6\xab\xfa\x37\x34\x52\xb8\xfa\x14\x66\x75\xc6\x33\xa8\x36\xa6\xfe\x73\x94\x0f\xba\x47\x05\xcf\xc0\xb5\xc9\x3e\x0e\x0a\x84\xb0\x93\xe9\xca\xbb\x8b\x6b\x13\x7b\x31\x37\xce\xe4\xd2\x6f\xde\x8f\xa8\xc0\x79\x6b\x71\x00\xfe\xa8\xc3\x84\x0a\xea\xa3\x4c\xe7\x4a\xba\x19\xf9\x05\xd2\xf0\x1d\x92\x36\x67\x58\x84\x3a\x19\x07\x7c\x0c\xda\xa0\x8b\xc1\x62\x52\xb0\x9b\x4c\x57\xde\x45\x3c\x8a\x3c\x00\xd7\x53\x8e\x6d\x34\x13\x9d\x8a\x49\x51\x46\x35\xaf\x64\xd9\x44\xc5\x24\x99\xe4\xc7\xcc\x29\x99\x8f\xe3\x28\xf3\x5e\xdf\x53\x29\x64\x09\x37\x95\x14\xcb\x99\xbd\x07\x00\x00\xff\xff\x2f\x40\x64\x79\x7e\x02\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDateJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x31\x6f\xdb\x30\x14\x84\x77\xfe\x8a\x83\x96\x48\x88\x11\xa8\x43\x97\xaa\x1a\x52\xa4\x45\x1a\x54\xe9\x50\x6f\x86\x07\x9a\x7a\xb6\x08\x8b\xa4\x41\x3d\xba\x30\x0a\xff\xf7\x82\x94\x6d\xc9\x1d\xba\x1d\xef\xc3\x7b\x47\x1e\x95\xb3\x03\xc3\x38\xcb\xdd\xbb\x34\x34\xa0\xc6\x4a\x00\xd9\x9b\xb4\x41\xfa\x53\xb6\x40\xf6\x8d\x36\xfe\xaa\x1b\xe9\x55\x17\xc5\xf3\xc1\xeb\x7e\x74\x12\x78\x0b\x96\xb2\x45\x9a\x0c\x7d\x72\x9e\xc3\x2e\x0c\x1c\xd5\x2f\x3a\x30\x99\x0d\xf9\x78\xf8\xa9\xd8\x5d\xe4\xbb\x3b\xde\xec\x17\x52\xa3\x16\xeb\x4a\x88\x6d\xb0\x8a\xb5\xb3\x18\x58\x7a\x5e\x6a\x43\x79\x81\x3f\x02\x38\x4a\x0f\x76\xad\x3c\xa1\x86\xa5\xdf\x78\x91\x4c\x79\x51\x5d\x48\x87\x7a\xa4\x4f\x3b\xe2\x57\x17\xfc\x30\x31\x33\x67\x8d\xb6\x81\x69\x46\x9b\x3b\x1a\xdb\x98\x58\x3b\x67\x53\x60\x0c\x53\x1d\xa9\x7d\xba\x5e\x97\x3c\x73\xe7\x99\xe4\xb5\x4e\x05\x43\x96\xe3\xf4\xd7\x9e\xa2\xfc\x72\xfa\xde\xe6\x0f\xaa\x77\x6a\xff\x50\x3c\x69\x6b\xc9\xbf\x2e\x9b\x1f\xa8\xd1\xe1\x11\xd9\xa7\x0c\x8f\x30\xff\x9d\x6d\x25\xd3\x3f\xa3\xd3\x1f\xae\x9a\x75\x5c\x83\xb8\xa6\xbd\xbe\x82\x51\x63\xa0\xd4\xa5\x0b\x9c\xdf\x8a\x5d\xe0\x63\x59\x16\x95\x38\xcf\x5a\x9f\x9e\xa0\xc7\xda\xf5\x16\xb9\xc6\x67\x7c\x28\xc7\x33\xa0\x51\x23\x2b\x63\x82\x16\xc0\x39\xa6\x78\xe2\xe0\x2d\x74\xda\x35\xfb\xb8\x4a\xfc\x0d\x00\x00\xff\xff\x30\x1b\x98\xab\x65\x02\x00\x00")

func assetsDateJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsDateJs,
		"assets/date.js",
	)
}

func assetsDateJs() (*asset, error) {
	bytes, err := assetsDateJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/date.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xdd\x8a\xdb\x30\x10\x85\xef\xfd\x14\x02\x53\xe8\x16\xbc\x58\xfe\x8b\xa2\x7d\x1a\xfd\x8c\x1c\xb5\xb6\x64\x64\xa5\x49\x28\x79\xf7\x32\x72\xba\x56\xe8\x92\x9b\x80\xbe\x33\x73\x66\xce\xc4\x3c\x78\x1f\xc9\x9f\x82\x90\xaa\x72\x3e\xe8\x9a\x93\xb2\x81\xb6\xeb\xea\x8f\x4f\x46\x39\x29\x5b\xd9\x35\x7d\xb3\xb3\x86\x93\xb2\x6b\x3b\xd5\xc3\xce\x5a\x64\xaa\x1f\x06\xb1\xb3\x8e\x93\x52\x33\x0d\x70\xdc\x59\xcf\x49\x09\x3d\x1c\x4d\x36\x63\x40\xa6\xc0\x98\x6e\x67\x07\x4e\x4a\x66\xa4\x92\x72\x67\x0c\x19\x53\xb5\xce\x7a\x8f\xc8\xa8\xa0\x8a\x66\x3b\x63\x90\x1e\x18\x15\x2a\x83\x98\x44\x9a\x81\xe6\x1b\x52\x8c\xa2\x6b\x76\x38\xe4\x91\x31\x0b\x48\x25\x59\x36\x9b\x62\x18\xd1\x4a\x60\xb9\x27\xa6\x91\x1d\x03\xa1\x3f\x8a\x7b\x51\xfc\x48\xc7\x54\x7e\xf2\x81\x93\xd2\x18\x83\xa5\xc6\xbb\x58\x19\x31\xdb\xe9\xc6\xc9\xec\x9d\x5f\x17\xa1\xe0\x53\xb9\x80\x1d\x4f\x91\x13\xe7\xc3\x2c\x26\xc4\xb3\x08\xa3\x75\x9c\xa4\x95\x16\xa1\xb5\x75\x63\x7a\xdd\x8b\xe2\x14\xe7\x29\x0d\x91\x42\xfd\x1a\x83\x3f\x3b\x5d\x3d\xe6\xfd\x16\xe1\xfb\xe3\x7f\x7c\xc3\xce\xd3\xc3\x98\xd6\xf5\xb7\xd4\x2b\xbd\xbe\xa5\xde\x67\xe5\xc5\x40\x42\xb4\x5d\x97\x49\xdc\x38\x31\x13\x5c\x11\x88\xc9\x8e\xae\x52\xde\x45\x70\x91\x13\x05\x2e\x42\x40\xe1\xe7\x79\x8d\xd6\xdc\xbe\x92\xb6\x1e\x1b\x61\x5e\x37\xa3\x6a\x8d\x22\xc4\x74\x02\x7c\x5d\x82\x58\x38\xc1\x5f\x44\x11\xae\xb1\x4a\x2d\xbb\xc7\xbd\x28\x8c\x0f\x73\xda\xfe\xdf\xb6\xb4\x5e\xae\x49\xb1\x6e\x39\x6f\x9f\xb1\xf4\x41\x43\xc0\x5b\x3a\x78\xca\xb2\xd5\xbe\xbe\x1a\x7d\x4b\x6e\xef\xb8\x67\x45\x9b\x64\xf8\x9f\xc1\xc5\xea\x78\xca\x6e\xba\x55\x0f\xa9\xf8\xa1\xf5\x4f\x52\x9b\x4b\x4d\x9f\x4b\x4d\x2e\xd1\xe1\x7d\x48\xe2\xdf\x00\x00\x00\xff\xff\x83\xe2\xbb\x3c\x95\x03\x00\x00")

func assetsStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsStylesCss,
		"assets/styles.css",
	)
}

func assetsStylesCss() (*asset, error) {
	bytes, err := assetsStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/styles.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/calendar.html": htmlCalendarHtml,
	"html/index.html":    htmlIndexHtml,
	"assets/date.js":     assetsDateJs,
	"assets/styles.css":  assetsStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"date.js":    {assetsDateJs, map[string]*bintree{}},
		"styles.css": {assetsStylesCss, map[string]*bintree{}},
	}},
	"html": {nil, map[string]*bintree{
		"calendar.html": {htmlCalendarHtml, map[string]*bintree{}},
		"index.html":    {htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
