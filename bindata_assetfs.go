// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/calendar.html
// html/index.html
// assets/date.js
// assets/styles.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlCalendarHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xb1\x8e\xdc\x20\x10\xad\xf1\x57\x90\x49\x93\x14\x0e\xda\x94\x1b\xd8\x66\x93\x3a\x91\x92\x26\xe5\x2c\x8c\xd7\xdc\x62\xb0\x60\xbc\x3a\xeb\x74\xff\x7e\x32\x78\xa5\x2b\xae\x81\x19\xde\x7b\xc3\x7b\xa0\x3f\xfd\xfc\x7d\xfe\xf7\xff\xcf\x2f\x39\xf2\x14\x4e\x9d\x6e\x9b\xd0\x23\xa1\x3b\x75\x42\xe8\xe0\xe3\x4d\x66\x0a\x06\x0a\xaf\x81\xca\x48\xc4\x20\xc7\x4c\x83\x01\x85\xa5\x10\x17\xd5\x90\x6f\xb6\x14\xa8\x1a\xf6\x1c\xe8\x74\xc6\x40\xd1\x61\xd6\xaa\xf5\x1b\x52\x99\x5b\x25\x86\x94\x27\xf9\xb2\x55\xc2\xf9\x32\x07\x5c\x8f\x72\x08\xf4\xfc\xa3\x1e\x61\xf0\xd7\xd8\xdb\x14\x99\x22\x1f\xa5\xa5\xc8\x94\x1b\xf4\xb4\x14\xf6\xc3\xfa\x21\xf8\xda\x6d\xeb\xe7\xb2\x5c\x26\xcf\xfb\xf4\x0b\xda\xdb\x35\xa7\x25\xba\xde\xa6\x90\xf2\x51\xde\x31\x7f\xe9\xfb\x98\xb2\x3b\x1c\xbe\xee\x3a\x21\xb4\x7a\x98\xd3\xaa\xa5\xef\x84\xbe\x24\xb7\x56\xe3\xd5\xae\x0d\x58\x8a\x01\xcf\x34\xf5\x87\xef\x20\xd1\xb2\x4f\xd1\x80\xb2\x7b\x54\x75\xa5\x48\x19\x99\x40\x4e\xc4\x63\x72\x06\xe6\x54\x18\x24\x45\xcb\xeb\x4c\x06\xa6\x25\xb0\x9f\x31\xb3\xda\x26\xf6\x0e\x19\xeb\x9b\x09\xed\xe3\xbc\xb0\x6c\xac\xc1\x07\x02\x19\x71\xda\xeb\x02\x52\xbd\x67\x79\x67\xa0\x85\x84\x5d\xf1\xe8\xee\x18\x16\x32\xf0\x77\x6f\xab\x4a\xd7\xbb\x6a\xb0\x96\x47\xab\xf6\xcd\x6f\x01\x00\x00\xff\xff\xd3\xbd\x04\x4e\xfe\x01\x00\x00")

func htmlCalendarHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlCalendarHtml,
		"html/calendar.html",
	)
}

func htmlCalendarHtml() (*asset, error) {
	bytes, err := htmlCalendarHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/calendar.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcd\x8e\xd3\x30\x10\x3e\x3b\x4f\x61\x06\x71\x6c\xdd\x20\x71\x29\x76\x2e\x14\x71\x04\x09\x2e\x1c\x8d\x3d\xa9\x4d\x9c\x38\xd8\x13\xa0\xbb\xda\x77\x5f\x39\x6e\xb5\xd5\x1e\x2a\xed\x1e\x9c\x4c\xf2\xfd\xcc\x78\x66\xe4\x9b\xc3\xd7\x4f\x3f\x7e\x7e\xfb\xcc\x1d\x8d\xa1\x6b\x64\x7d\x31\xe9\x50\xdb\xae\x61\x4c\x06\x3f\x0d\x3c\x61\x50\x90\xe9\x14\x30\x3b\x44\x02\xee\x12\xf6\x0a\x84\xce\x19\x29\x8b\x8a\x6c\x4d\xce\xb0\x6a\xc8\x53\xc0\xee\x3b\xe9\x44\xb3\x3e\xa2\x14\xf5\x47\x81\x56\x6a\x89\x98\x9f\xe6\x85\xf8\x7d\x09\xd9\x3f\x6f\xc9\xed\xf9\x87\xdd\xbb\x8f\xe5\xfb\xa1\x29\xcf\xb7\x26\x44\x33\x9c\x19\x7d\x9c\x68\x93\xfd\x1d\xee\x79\xbb\x4b\x38\x9e\x79\x8c\x49\x71\xb1\x94\xa2\x16\xdd\x30\xf9\x2b\xda\xd3\x9a\xce\xb5\xdc\x5b\x05\xab\x13\x70\x13\x74\xce\x0a\x3c\xe1\xb8\x69\xdf\x43\x27\x85\x6b\xaf\x69\x56\x13\xde\x60\xf5\x31\x8d\xcf\x51\x3e\xe9\x11\x15\xfc\x07\xae\x0d\xf9\x38\x29\x10\xc2\x2e\x66\x28\xe7\x18\xb7\x26\x8e\x62\xed\x09\x93\xf5\xbe\x74\x9a\x51\x81\xf3\xd6\xe2\x04\xfc\xaf\x0e\x0b\x2a\x68\x2f\x36\x83\x2b\xe9\x56\xe6\x0b\x44\xd3\x6b\x44\xda\xdc\x50\x65\xd4\xc9\x38\xe0\x73\xd0\x06\x5d\x0c\x16\x93\x82\xc3\x62\x86\x72\xbe\xc4\x8b\xc9\x1f\xe0\x7a\xa1\xd8\x47\xb3\xe4\x6b\x33\x29\x4a\xab\xd6\x91\xd4\x49\x34\x4c\x66\x93\xfc\x4c\x3c\x27\xf3\xb4\x37\xa5\xdf\xdb\xdf\xb9\x14\x52\xe1\xae\x91\xa2\x6e\xe0\x63\x00\x00\x00\xff\xff\xa0\xb0\xbc\x0c\x99\x02\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDateJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x31\x6f\xdb\x30\x14\x84\x77\xfe\x8a\x83\x96\x48\x88\x11\xa8\x43\x97\xaa\x1a\x52\xa4\x45\x1a\x54\xe9\x50\x6f\x86\x07\x9a\x7a\xb6\x08\x8b\xa4\x41\x3d\xba\x30\x0a\xff\xf7\x82\x94\x6d\xc9\x1d\xba\x1d\xef\xc3\x7b\x47\x1e\x95\xb3\x03\xc3\x38\xcb\xdd\xbb\x34\x34\xa0\xc6\x4a\x00\xd9\x9b\xb4\x41\xfa\x53\xb6\x40\xf6\x8d\x36\xfe\xaa\x1b\xe9\x55\x17\xc5\xf3\xc1\xeb\x7e\x74\x12\x78\x0b\x96\xb2\x45\x9a\x0c\x7d\x72\x9e\xc3\x2e\x0c\x1c\xd5\x2f\x3a\x30\x99\x0d\xf9\x78\xf8\xa9\xd8\x5d\xe4\xbb\x3b\xde\xec\x17\x52\xa3\x16\xeb\x4a\x88\x6d\xb0\x8a\xb5\xb3\x18\x58\x7a\x5e\x6a\x43\x79\x81\x3f\x02\x38\x4a\x0f\x76\xad\x3c\xa1\x86\xa5\xdf\x78\x91\x4c\x79\x51\x5d\x48\x87\x7a\xa4\x4f\x3b\xe2\x57\x17\xfc\x30\x31\x33\x67\x8d\xb6\x81\x69\x46\x9b\x3b\x1a\xdb\x98\x58\x3b\x67\x53\x60\x0c\x53\x1d\xa9\x7d\xba\x5e\x97\x3c\x73\xe7\x99\xe4\xb5\x4e\x05\x43\x96\xe3\xf4\xd7\x9e\xa2\xfc\x72\xfa\xde\xe6\x0f\xaa\x77\x6a\xff\x50\x3c\x69\x6b\xc9\xbf\x2e\x9b\x1f\xa8\xd1\xe1\x11\xd9\xa7\x0c\x8f\x30\xff\x9d\x6d\x25\xd3\x3f\xa3\xd3\x1f\xae\x9a\x75\x5c\x83\xb8\xa6\xbd\xbe\x82\x51\x63\xa0\xd4\xa5\x0b\x9c\xdf\x8a\x5d\xe0\x63\x59\x16\x95\x38\xcf\x5a\x9f\x9e\xa0\xc7\xda\xf5\x16\xb9\xc6\x67\x7c\x28\xc7\x33\xa0\x51\x23\x2b\x63\x82\x16\xc0\x39\xa6\x78\xe2\xe0\x2d\x74\xda\x35\xfb\xb8\x4a\xfc\x0d\x00\x00\xff\xff\x30\x1b\x98\xab\x65\x02\x00\x00")

func assetsDateJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsDateJs,
		"assets/date.js",
	)
}

func assetsDateJs() (*asset, error) {
	bytes, err := assetsDateJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/date.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xdd\x8a\xdb\x30\x10\x85\xef\xfd\x14\x02\x53\xe8\x16\xbc\x58\xfe\x8b\xa2\x7d\x1a\xfd\x8c\x1c\xb5\xb6\x64\x64\xa5\x49\x28\x79\xf7\x32\x72\xba\x56\xe8\x92\x9b\x80\xbe\x33\x73\x66\xce\xc4\x3c\x78\x1f\xc9\x9f\x82\x90\xaa\x72\x3e\xe8\x9a\x93\xb2\x81\xb6\xeb\xea\x8f\x4f\x46\x39\x29\x5b\xd9\x35\x7d\xb3\xb3\x86\x93\xb2\x6b\x3b\xd5\xc3\xce\x5a\x64\xaa\x1f\x06\xb1\xb3\x8e\x93\x52\x33\x0d\x70\xdc\x59\xcf\x49\x09\x3d\x1c\x4d\x36\x63\x40\xa6\xc0\x98\x6e\x67\x07\x4e\x4a\x66\xa4\x92\x72\x67\x0c\x19\x53\xb5\xce\x7a\x8f\xc8\xa8\xa0\x8a\x66\x3b\x63\x90\x1e\x18\x15\x2a\x83\x98\x44\x9a\x81\xe6\x1b\x52\x8c\xa2\x6b\x76\x38\xe4\x91\x31\x0b\x48\x25\x59\x36\x9b\x62\x18\xd1\x4a\x60\xb9\x27\xa6\x91\x1d\x03\xa1\x3f\x8a\x7b\x51\xfc\x48\xc7\x54\x7e\xf2\x81\x93\xd2\x18\x83\xa5\xc6\xbb\x58\x19\x31\xdb\xe9\xc6\xc9\xec\x9d\x5f\x17\xa1\xe0\x53\xb9\x80\x1d\x4f\x91\x13\xe7\xc3\x2c\x26\xc4\xb3\x08\xa3\x75\x9c\xa4\x95\x16\xa1\xb5\x75\x63\x7a\xdd\x8b\xe2\x14\xe7\x29\x0d\x91\x42\xfd\x1a\x83\x3f\x3b\x5d\x3d\xe6\xfd\x16\xe1\xfb\xe3\x7f\x7c\xc3\xce\xd3\xc3\x98\xd6\xf5\xb7\xd4\x2b\xbd\xbe\xa5\xde\x67\xe5\xc5\x40\x42\xb4\x5d\x97\x49\xdc\x38\x31\x13\x5c\x11\x88\xc9\x8e\xae\x52\xde\x45\x70\x91\x13\x05\x2e\x42\x40\xe1\xe7\x79\x8d\xd6\xdc\xbe\x92\xb6\x1e\x1b\x61\x5e\x37\xa3\x6a\x8d\x22\xc4\x74\x02\x7c\x5d\x82\x58\x38\xc1\x5f\x44\x11\xae\xb1\x4a\x2d\xbb\xc7\xbd\x28\x8c\x0f\x73\xda\xfe\xdf\xb6\xb4\x5e\xae\x49\xb1\x6e\x39\x6f\x9f\xb1\xf4\x41\x43\xc0\x5b\x3a\x78\xca\xb2\xd5\xbe\xbe\x1a\x7d\x4b\x6e\xef\xb8\x67\x45\x9b\x64\xf8\x9f\xc1\xc5\xea\x78\xca\x6e\xba\x55\x0f\xa9\xf8\xa1\xf5\x4f\x52\x9b\x4b\x4d\x9f\x4b\x4d\x2e\xd1\xe1\x7d\x48\xe2\xdf\x00\x00\x00\xff\xff\x83\xe2\xbb\x3c\x95\x03\x00\x00")

func assetsStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsStylesCss,
		"assets/styles.css",
	)
}

func assetsStylesCss() (*asset, error) {
	bytes, err := assetsStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/styles.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/calendar.html": htmlCalendarHtml,
	"html/index.html":    htmlIndexHtml,
	"assets/date.js":     assetsDateJs,
	"assets/styles.css":  assetsStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"date.js":    {assetsDateJs, map[string]*bintree{}},
		"styles.css": {assetsStylesCss, map[string]*bintree{}},
	}},
	"html": {nil, map[string]*bintree{
		"calendar.html": {htmlCalendarHtml, map[string]*bintree{}},
		"index.html":    {htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
